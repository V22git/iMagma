"""

Top level script to run Impacts Magma (iMagma)

By: Viranga Perera & Alan P. Jackson
Modified: September 1, 2017

This script calls the MAIN.py python script of iMagma

Warning: Holes Generated by Impacts Needs Quench To Work!

"""

from __future__ import division
import numpy as np
import os
import csv
import subprocess

################################################################################################################

ImpactsSwitch = False           # Set True to add early impacts and False to turn off
QuenchSwitch = True            # Set True to allow quench crust to form and False to turn it off
KineticEnergySwitch = False     # Set True to add kinetic energy imparted by re-impacts and False to turn it off
GeneralHeatingSwitch = False   # Set True to allow additional heating of the magma ocean and False to turn it off
useDefaults = False            # 'True' to use default values & 'False' to use parameter search

UserPath = os.getcwd() + '/'   # Define path

################################################################################################################

if useDefaults == True:

    ############### DEFAULTS ###################################################################################
    
    ImpactsFile = 'AlanData_100km_10Re.csv'   # Alan's re-impacting debris file to use
    LargestImpactorSize = 100                 # in km
    MoonLocationDebrisCalc = 10               # in Earth radii

    adiabslope = 1.5e-4                       # Slope of adiabat (K/m) [from Zhang et al. (2013), JGR] - for another formula see Monteux et al 2016 eq. 18
    
    KEefficiency = 1.0                        # Efficiency by which impact kinetic energy is imparted into the LMO

    acc_grav = 1.6                            # Acceleration due to gravity (m/s2)
    
    # Magma ocean constants
    MO_depth_initial = 1000e3                 # Initial magma ocean depth (m)
    MO_depth_plagBuild = 100e3                # Magma ocean depth when plagioclase starts to build (m)
    density_MO = 3000                         # Density of magma ocean (kg/m^3)
    Heat_fusion_MO = 418700                   # Heat of fusion of magma ocean (J/kg)
    Heat_capacity_MO = 1256.1                 # Heat capacity of magma ocean (J/kg*K)
    therm_exp_coeff_MO = 3e-5                 # Thermal expansion coefficient of magma ocean (1/K)
    Diffusivity_MO = 1e-6                     # Diffusivity for magma ocean (m^2/s)
    dy_viscosity_MO = 1e3                     # Dynamic viscosity of magma ocean (Pa-s)
    
    # Crust constants
    Temperature_equl = 250                    # Global equilibrium temperature of the Moon as a whole (K)
    Diffusivity_crust = 1e-6                  # Diffusivity for solid crust (m^2/s)
    density_crust = 2700                      # Density of crust (kg/m^3)
    Heat_capacity_crust = 1256.1              # Heat capacity of crust (J/kg*K)
    
    # Quench crust constants
    Max_Quench_Thickness = 10                 # Maximum thickness for quench before it starts to sink (m)
    Temperature_melt = 1000                   # Temperature at which quench crust will melt (K)
    Diffusivity_quench = 1e-6                 # Diffusivity for quench crust (m^2/s)
    density_quench = 2700                     # Density of quench crust (kg/m^3)
    Heat_capacity_quench = 1256.1             # Heat capacity of quench crust (J/kg*K)
    
    # Atmosphere constants 
    Emissivity = 1.0                          # Emissivity of atmosphere on top of crust (unitless)
    
    # Impact mass to hole area convertion factor
    mass2area = 1e10
    
    # Constant heat added per unit time (in watts)
    HeatingRate = 1e10      
    
    # Plagioclase controler 
    plag_holeFill_vs_gblCrust = 1.0           # Higher numbers enhances plagioclase going into holes rather than the global crust
    
    # Plagioclase fractionation after plagioclase stability depth reached
    plag_fraction = 0.45
    
    # Number of segments to divide the initial magma ocean volume (to be used for interations)
    vol_increments = 200000
    
    # Set percentage of the original magma ocean volume that should remain at the end (so that weird stuff dosen't happen with the last remaining liquid)
    percMO_remain_end = 1
    
    RunNumber = 1
    workingPath = UserPath + str(RunNumber) + '/'
                                                                    
    necessaryInputs = np.array([UserPath, workingPath, ImpactsSwitch, QuenchSwitch, GeneralHeatingSwitch, adiabslope, MO_depth_initial, MO_depth_plagBuild, density_MO, Heat_fusion_MO, \
                                    Heat_capacity_MO, therm_exp_coeff_MO, Diffusivity_MO, dy_viscosity_MO, Temperature_equl, Diffusivity_crust, density_crust, Heat_capacity_crust, \
                                    Emissivity, mass2area, acc_grav, Temperature_melt, Diffusivity_quench, density_quench, Heat_capacity_quench, Max_Quench_Thickness, vol_increments, \
                                    percMO_remain_end, plag_holeFill_vs_gblCrust, ImpactsFile, RunNumber, LargestImpactorSize, MoonLocationDebrisCalc, HeatingRate, KineticEnergySwitch, \
                                    KEefficiency, plag_fraction])
    
    os.mkdir(UserPath + str(RunNumber))
                                                                                                                                        
    # Write input file for MAIN.py as a CSV file                                                                    
    with open(workingPath + 'inputFile.csv', 'w') as f:
        inputCSV = csv.writer(f, delimiter=',')
        inputCSV.writerow(necessaryInputs)
                                                                        
    os.chdir(workingPath)
    os.system('python ' + UserPath + 'MAIN.py')
    os.chdir(UserPath)

                

elif useDefaults == False:
    
    ############### PARAMETER SEARCH ##################################################################
    
    RunNumber = 3 # Used for naming various runs
    
    ImpactsFile = 'AlanData_100km_10Re.csv'   # Alan's re-impacting debris file to use
    LargestImpactorSize = 100    # in km
    MoonLocationDebrisCalc = 10  # in Earth radii
    
    # Parameters Held Constant
    acc_grav = 1.6                        
    percMO_remain_end = 1
    plag_holeFill_vs_gblCrust = 1.0
    density_MO = 3000
    density_crust = 2700
    density_quench = 2700
    therm_exp_coeff_MO = 3e-5
    Diffusivity_MO = 1e-6
    Diffusivity_crust = 1e-6
    Diffusivity_quench = 1e-6
    
    
    # Parameters Varied
    
    ImpactsSwitch_array = ['False']

    KEefficiency_array = np.array([0.0])
    
    adiabslope_array = np.arange(1.5e-4, 2*1.5e-4, 1.5e-4)
    
    # Magma ocean constants
    MO_depth_initial_array = np.arange(1000e3, 2*1000e3, 1000e3)
    MO_depth_plagBuild_array = np.arange(100e3, 2*100e3, 100e3)
    Heat_fusion_MO_array = np.arange(418700, 2*418700, 418700)
    Heat_capacity_MO_array = np.arange(1256.1, 2*1256.1, 1256.1)
    dy_viscosity_MO_array = np.array([1e3])
    
    # Crust constants
    Temperature_equl_array = np.arange(250, 2*250, 250)
    Diffusivity_crust_array = np.arange(1e-6, 2*1e-6, 1e-6)
    Heat_capacity_crust_array = np.arange(1256.1, 2*1256.1, 1256.1)
    
    # Quench constants
    Max_Quench_Thickness_array = np.arange(10, 2*10, 10)
    Heat_capacity_quench_array = np.arange(1256.1, 2*1256.1, 1256.1)
    Temperature_melt_array = np.arange(1000, 2*1000, 1000)
    
    # Atmosphere constants 
    Emissivity_array = np.arange(1.0, 2*1.0, 1.0)
    
    # Plagioclase fractionation after plagioclase stability depth reached
    plag_fraction = 0.45
    
    # Impact mass to hole area convertion factor
    mass2area_array = np.array([1e7])
    
    # Constant heat added per unit time (in watts)
    HeatingRate_array = np.array([0])
    
    # Number of segments to divide the initial magma ocean volume (to be used for interations)
    vol_increments_array = np.array([150000])
    
    
    for adiabslope in adiabslope_array:
        for MO_depth_initial in MO_depth_initial_array:
            for MO_depth_plagBuild in MO_depth_plagBuild_array:
                for Heat_fusion_MO in Heat_fusion_MO_array:
                    for Heat_capacity_MO in Heat_capacity_MO_array:
                        for dy_viscosity_MO in dy_viscosity_MO_array:
                            for Temperature_equl in Temperature_equl_array:
                                for Diffusivity_crust in Diffusivity_crust_array:
                                    for Heat_capacity_crust in Heat_capacity_crust_array:
                                        for Max_Quench_Thickness in Max_Quench_Thickness_array:
                                            for Heat_capacity_quench in Heat_capacity_quench_array:
                                                for Temperature_melt in Temperature_melt_array:
                                                    for Emissivity in Emissivity_array:
                                                        for mass2area in mass2area_array:
                                                            for HeatingRate in HeatingRate_array:
                                                                for vol_increments in vol_increments_array:
                                                                    for ImpactsSwitch in ImpactsSwitch_array:
                                                                        for KEefficiency in KEefficiency_array:
                                            
                                                                            try:
                                                                    
                                                                                workingPath = UserPath + str(RunNumber) + '/'
                                                                   
                                                                                necessaryInputs = np.array([UserPath, workingPath, ImpactsSwitch, QuenchSwitch, GeneralHeatingSwitch, adiabslope, \
                                                                                                MO_depth_initial, MO_depth_plagBuild, density_MO, Heat_fusion_MO, Heat_capacity_MO, \
                                                                                                therm_exp_coeff_MO, Diffusivity_MO, dy_viscosity_MO, Temperature_equl, Diffusivity_crust, \
                                                                                                density_crust, Heat_capacity_crust, Emissivity, mass2area, acc_grav, Temperature_melt, \
                                                                                                Diffusivity_quench, density_quench, Heat_capacity_quench, Max_Quench_Thickness, \
                                                                                                vol_increments, percMO_remain_end, plag_holeFill_vs_gblCrust, ImpactsFile, RunNumber, \
                                                                                                LargestImpactorSize, MoonLocationDebrisCalc, HeatingRate, KineticEnergySwitch, KEefficiency, \
                                                                                                plag_fraction])
                                                                    
                                                                                os.mkdir(UserPath + str(RunNumber))
                                                                
                                                                                # Write input file for MAIN.py as a CSV file                                                                    
                                                                                with open(workingPath + 'inputFile.csv', 'w') as f:
                                                                                    inputCSV = csv.writer(f, delimiter=',')
                                                                                    inputCSV.writerow(necessaryInputs)
                                                                    
                                                                                os.chdir(workingPath)
                                                                   
                                                                                subprocess.Popen('python ' + UserPath + 'MAIN.py', shell=True)
                                                                    
                                                                                os.chdir(UserPath)
                                                                                                             
                                                                                RunNumber += 1
                                                                                                      
                                                                            # If an error occurs, note it in the output file and move on with the rest of the iterations
                                                                            except Exception as e:
                                                                    
                                                                                with open(UserPath + str(RunNumber) + '/' + 'errorFile.csv', 'w') as f:
                                                                                        np.savetxt(f, str(e))
                                                                                                                                                               
                                                                                RunNumber += 1
                                                
                                                                                continue
